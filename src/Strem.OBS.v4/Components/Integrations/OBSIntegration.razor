@using System.Reactive.Disposables
@using Obs.v4.WebSocket.Reactive
@using Persistity.Encryption
@using Persistity.Extensions
@using Strem.Core.State
@using Strem.OBS.v4.Extensions
@using Strem.OBS.v4.Variables

@inject IObservableOBSWebSocket ObsClient
@inject IAppState AppState
@inject IEncryptor Encryptor

@implements IDisposable

<div class="columns">
    <div class="column">
        <label class="label">OBS Host/IP & Port</label>
        <div class="field has-addons">
            <div class="control is-expanded">
                <TextInput placeholder="i.e localhost or 127.0.0.1" @bind-Value="Host"/>
            </div>
            <div class="control">
                <label class="label m-2">:</label>
            </div>
            <div class="control">
                <TextInput placeholder="i.e 4444" @bind-Value="Port"/>
            </div>
        </div>
        <div class="field">
            <div class="control">
                @if (IsConnected)
                {
                    <button class="button is-danger" @onclick="DisconnectFromOBS" disabled="@IsConnecting">Disconnect From OBS</button>
                }
                else
                {
                    <button class="button is-success" @onclick="ConnectToOBS" disabled="@IsConnecting">Connect To OBS</button>
                }
            </div>
            @if (!string.IsNullOrEmpty(ConnectionError))
            {
                <p class="help">
                    <span class="icon has-text-danger">
                        <i class="fas fa-circle-exclamation"></i>
                    </span>
                    <span class="has-text-danger">
                        @ConnectionError
                    </span>
                </p>
            }
        </div>
    </div>
    <div class="column">
        <div class="field">
            <label class="label">OBS Server Password</label>
            <div class="control">
                <TextInput type="password" @bind-Value="Password"/>
            </div>
            <HelperInfo>You can leave the password empty if there is no password set on the server</HelperInfo>
        </div>
    </div>
</div>
<div class="field">
    <HelperInfo StyleType="has-text-danger">With Obs Websocket v4 being phased out, it is recommended you use the v5 integration (assuming your OBS is at least v28)</HelperInfo>
</div>

@code {
    private CompositeDisposable _subs = new();
    
    public string Host { get; set; }
    public string Port { get; set; }
    public string Password { get; set; }
    public string ConnectionError { get; set; }

    public bool IsConnected => ObsClient.IsConnected;
    public bool IsConnecting { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (AppState.AppVariables.Has(OBSVars.Host))
        {
            Host = AppState.AppVariables.Get(OBSVars.Host);
            Port = AppState.AppVariables.Get(OBSVars.Port);

            if (AppState.AppVariables.Has(OBSVars.Password))
            {
                var password = AppState.AppVariables.Get(OBSVars.Password);
                Password = Encryptor.Decrypt(password);
            }
        }
    }

    public async Task ConnectToOBS()
    {
        if(IsConnecting){ return; }
        
        IsConnecting = true;
        InvokeAsync(StateHasChanged);
        
        var result = await ObsClient.AttemptConnect(Host, Port, Password);
        ConnectionError = string.Empty;
        
        if (result.success)
        {
            AppState.AppVariables.Delete(OBSVars.Password);
            AppState.AppVariables.Set(OBSVars.Host, Host);
            AppState.AppVariables.Set(OBSVars.Port, Port);
            if (!string.IsNullOrEmpty(Password))
            {
                var encryptedPassword = Encryptor.Encrypt(Password);
                AppState.AppVariables.Set(OBSVars.Password, encryptedPassword);
            }
        }
        else
        { ConnectionError = result.message; }
        
        IsConnecting = false;
        InvokeAsync(StateHasChanged);
    }

    public void DisconnectFromOBS()
    {
        AppState.AppVariables.Delete(OBSVars.Password);
        AppState.AppVariables.Delete(OBSVars.Host);
        AppState.AppVariables.Delete(OBSVars.Port);
        
        if (!ObsClient.IsConnected){return;}
        ObsClient.Disconnect();
    }
    
    public void Dispose()
    {
        _subs?.Dispose();  
    } 
}